contingency_table
#Pr1
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
contingency_table <- matrix(c(males, females), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- c("Male", "Female")
colnames(contingency_table) <- c("Yes", "No")
contingency_table
# Total respondents
total_respondents <- sum(contingency_table)
# Probability calculations
prob_male <- sum(contingency_table["Male", ]) / total_respondents
prob_enjoys_shopping <- sum(contingency_table[, "Yes"]) / total_respondents
prob_female_enjoys <- contingency_table["Female", "Yes"] / total_respondents
prob_male_not_enjoy <- contingency_table["Male", "No"] / total_respondents
prob_female_or_enjoys <- (contingency_table["Female", "Yes"] + contingency_table["Female", "No"] + contingency_table["Male", "Yes"] - contingency_table["Female", "Yes"]) / total_respondents
prob_male_or_not_enjoy <- (sum(contingency_table["Male", ]) + sum(contingency_table[, "No"]) - contingency_table["Male", "No"]) / total_respondents
prob_male_or_female <- 1  # They cover all possibilities
prob_female_or_enjoys <- (contingency_table["Female", "Yes"] + contingency_table["Female", "No"] + contingency_table["Male", "Yes"] - contingency_table["Female", "Yes"]) / total_respondents
prob_female_or_enjoys <- (contingency_table["Female",] + contingency_table["Male", "Yes"] - contingency_table["Female", "Yes"]) / total_respondents
prob_female_or_enjoys <- (sum(contingency_table["Female",] + contingency_table["Male", "Yes"] - contingency_table["Female", "Yes"])) / total_respondents
prob_female_enjoys <- contingency_table["Female", "Yes"] / total_respondents
prob_female_or_enjoys <- (contingency_table["Female", "Yes"] + contingency_table["Female", "No"] + contingency_table["Male", "Yes"] - contingency_table["Female", "Yes"]) / total_respondents
# Conditional probabilities
prob_female_given_enjoys <- contingency_table["Female", "Yes"] / sum(contingency_table[, "Yes"])
create_contingency_table <- function(vector1, vector2) {
contingency_table <- matrix(c(males, females), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- c("${vector1}", "Female")
colnames(contingency_table) <- c("Yes", "No")
return(contingency_table)
}
View(create_contingency_table)
colnames(contingency_table) <- c("Yes", "No")
create_contingency_table <- function(vector1, vector2) {
contingency_table <- matrix(c(males, females), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- c("${vector1}", "${vector2}")
colnames(contingency_table) <- c("Yes", "No")
return(contingency_table)
}
create_contingency_table(males, females)
create_contingency_table <- function(vector1, vector2) {
contingency_table <- matrix(c(vector1, vector2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- c("${vector1}", "${vector2}")
colnames(contingency_table) <- c("Yes", "No")
return(contingency_table)
}
create_contingency_table(males, females)
rownames(contingency_table) <- c(str_interp("${vector1}"), str_interp("${vector2}"))
create_contingency_table <- function(vector1, vector2) {
contingency_table <- matrix(c(vector1, vector2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- c("DataOne", "DataTwo")
colnames(contingency_table) <- c("Yes", "No")
return(contingency_table)
}
create_contingency_table <- function(vector1, vector2) {
contingency_table <- matrix(c(vector1, vector2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- c("DataOne", "DataTwo")
colnames(contingency_table) <- c("Yes", "No")
return(contingency_table)
}
create_contingency_table(males, females)
create_contingency_table <- function(group1, group2, labels) {
# Ensure labels length is 4 and contains row and column names
if(length(labels) != 4) {
stop("Labels must contain exactly four elements: two row names and two column names.")
}
contingency_table <- matrix(c(group1, group2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- labels[1:2]
colnames(contingency_table) <- labels[3:4]
return(contingency_table)
}
View(contingency_table)
rm()
rm()
rm(list = ls())
#----------------------------------Functions------------------------------------
create_contingency_table <- function(group1, group2, labels) {
# Ensure labels length is 4 and contains row and column names
if(length(labels) != 4) {
stop("Labels must contain exactly four elements: two row names and two column names.")
}
contingency_table <- matrix(c(group1, group2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- labels[1:2]
colnames(contingency_table) <- labels[3:4]
return(contingency_table)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
total <- sum(contingency_table)
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities for each category
category_probs <- apply(table, 1, function(x) sum(x) / total_respondents)
return(category_probs)
}
calculate_probabilities(contingency_table)
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities for each row category (e.g., Male, Female)
row_probs <- apply(table, 1, sum) / total_respondents
# Calculate probabilities for each column category (e.g., Enjoys, Does Not Enjoy)
col_probs <- apply(table, 2, sum) / total_respondents
# Combine the results into a named list for clarity
probabilities <- list(
row_category_probs = row_probs,
col_category_probs = col_probs
)
return(probabilities)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
calculate_probabilities(contingency_table)
conditional_probability <- function(table, given_row, target_col) {
if (given_row %in% rownames(table) & target_col %in% colnames(table)) {
prob_target_given <- table[given_row, target_col] / sum(table[given_row, ])
return(prob_target_given)
} else {
stop("Invalid row or column value.")
}
}
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability(contingency_table, "Yes", "Female")
Female
conditional_probability(contingency_table, "Female", "Yes")
contingency_table
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability(contingency_table, "Yes", "Female")
conditional_probability(contingency_table, "Yes", "Female")
conditional_probability <- function(table, given_col, target_row) {
if (target_row %in% rownames(table) & given_col %in% colnames(table)) {
# Calculate the probability of the target row given the column
prob_target_given <- table[target_row, given_col] / sum(table[, given_col])
return(prob_target_given)
} else {
stop("Invalid row or column value.")
}
}
calculate_probabilities(contingency_table)
contingency_table
conditional_probability(contingency_table, "Yes", "Female")
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability(contingency_table, "Yes", "Female")
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability <- function(table, given_row, target_col) {
if (given_row %in% rownames(table) & target_col %in% colnames(table)) {
# Calculate the probability of the target column given the row
prob_target_given <- table[given_row, target_col] / sum(table[given_row, ])
return(prob_target_given)
} else {
stop("Invalid row or column value.")
}
}
conditional_probability(contingency_table, "Female", "Yes")
calculate_probabilities(contingency_table)
contingency_table
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability <- function(table, given_row, target_col) {
if (given_row %in% rownames(table) & target_col %in% colnames(table)) {
# Calculate the probability of the target column given the row
prob_target_given <- table[given_row, target_col] / sum(table[given_row, ])
return(prob_target_given)
} else {
stop("Invalid row or column value.")
}
}
contingency_table
conditional_probability(contingency_table, "Yes", "Female")
conditional_probability <- function(table, condition1, condition2) {
# Determine if condition1 is a row or column in the table
if (condition1 %in% rownames(table) & condition2 %in% colnames(table)) {
# condition1 is a row, condition2 is a column
prob_condition2_given_condition1 <- table[condition1, condition2] / sum(table[condition1, ])
return(prob_condition2_given_condition1)
} else if (condition1 %in% colnames(table) & condition2 %in% rownames(table)) {
# condition1 is a column, condition2 is a row
prob_condition2_given_condition1 <- table[condition2, condition1] / sum(table[, condition1])
return(prob_condition2_given_condition1)
} else {
stop("Invalid conditions. Please ensure they match the row and column names of the table.")
}
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
calculate_probabilities(contingency_table)
contingency_table
conditional_probability(contingency_table, "Yes", "Female")
conditional_probability(contingency_table, "Female", "Yes")
bayes_rule <- function(table, A_row, B_col) {
# P(A|B) = P(B|A) * P(A) / P(B)
prob_B_given_A <- conditional_probability(table, A_row, B_col)
prob_A <- sum(table[A_row, ]) / sum(table)
prob_B <- sum(table[, B_col]) / sum(table)
prob_A_given_B <- (prob_B_given_A * prob_A) / prob_B
return(prob_A_given_B)
}
conditional_probability(contingency_table, "Female", "Yes")
bayes_rule(contingency_table, "Female", "Yes")
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
bayes_rule(contingency_table, "Yes", "Female")
conditional_probability(contingency_table, "Female", "Yes")
bayes_rule(contingency_table, "Yes", "Female")
bayes_rule <- function(table, evidence, hypothesis) {
# Check if the evidence and hypothesis are valid
if ((evidence %in% rownames(table) || evidence %in% colnames(table)) &&
(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
# Calculate P(Hypothesis)
if (hypothesis %in% rownames(table)) {
prob_hypothesis <- sum(table[hypothesis, ]) / sum(table)
} else {
prob_hypothesis <- sum(table[, hypothesis]) / sum(table)
}
# Calculate P(Evidence|Hypothesis)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
# Calculate P(Evidence)
if (evidence %in% rownames(table)) {
prob_evidence <- sum(table[evidence, ]) / sum(table)
} else {
prob_evidence <- sum(table[, evidence]) / sum(table)
}
# Apply Bayes' rule: P(Hypothesis|Evidence) = (P(Evidence|Hypothesis) * P(Hypothesis)) / P(Evidence)
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
} else {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
}
conditional_probability(contingency_table, "Female", "Yes")
conditional_probability(contingency_table, "Yes", "Female")
bayes_rule(contingency_table, "Yes", "Female")
bayes_rule(contingency_table, "Female", "Yes")
rm(list = ls())
rm(list = ls())
#----------------------------------Functions------------------------------------
create_contingency_table <- function(group1, group2, labels) {
# Ensure labels length is 4 and contains row and column names
if(length(labels) != 4) {
stop("Labels must contain exactly four elements: two row names and two column names.")
}
contingency_table <- matrix(c(group1, group2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- labels[1:2]
colnames(contingency_table) <- labels[3:4]
return(contingency_table)
}
rm(list = ls())
#----------------------------------Functions------------------------------------
create_contingency_table <- function(group1, group2, labels) {
# Ensure labels length is 4 and contains row and column names
if(length(labels) != 4) {
stop("Labels must contain exactly four elements: two row names and two column names.")
}
contingency_table <- matrix(c(group1, group2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- labels[1:2]
colnames(contingency_table) <- labels[3:4]
return(contingency_table)
}
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities for each row category (e.g., Male, Female)
row_probs <- apply(table, 1, sum) / total_respondents
# Calculate probabilities for each column category (e.g., Enjoys, Does Not Enjoy)
col_probs <- apply(table, 2, sum) / total_respondents
# Combine the results into a named list for clarity
probabilities <- list(
row_category_probs = row_probs,
col_category_probs = col_probs
)
return(probabilities)
}
conditional_probability <- function(table, condition1, condition2) {
# Determine if condition1 is a row or column in the table
if (condition1 %in% rownames(table) & condition2 %in% colnames(table)) {
# condition1 is a row, condition2 is a column
prob_condition2_given_condition1 <- table[condition1, condition2] / sum(table[condition1, ])
return(prob_condition2_given_condition1)
} else if (condition1 %in% colnames(table) & condition2 %in% rownames(table)) {
# condition1 is a column, condition2 is a row
prob_condition2_given_condition1 <- table[condition2, condition1] / sum(table[, condition1])
return(prob_condition2_given_condition1)
} else {
stop("Invalid conditions. Please ensure they match the row and column names of the table.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Check if the evidence and hypothesis are valid
if ((evidence %in% rownames(table) || evidence %in% colnames(table)) &&
(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
# Calculate P(Hypothesis)
if (hypothesis %in% rownames(table)) {
prob_hypothesis <- sum(table[hypothesis, ]) / sum(table)
} else {
prob_hypothesis <- sum(table[, hypothesis]) / sum(table)
}
# Calculate P(Evidence|Hypothesis)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
# Calculate P(Evidence)
if (evidence %in% rownames(table)) {
prob_evidence <- sum(table[evidence, ]) / sum(table)
} else {
prob_evidence <- sum(table[, evidence]) / sum(table)
}
# Apply Bayes' rule: P(Hypothesis|Evidence) = (P(Evidence|Hypothesis) * P(Hypothesis)) / P(Evidence)
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
} else {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
# Probability calculations
probability_male <- calculate_probabilities(contingency_table)
probability_male
# Probability calculations
probability_male <- calculate_probabilities(contingency_table)["Male"]
probability_male
# Probability calculations
prob_male <- all_probabilities$row_category_probs["Male"]
# Probability calculations
prob_male <- calculate_probabilities(contingency_table)$row_category_probs["Male"]
prob_male
prob_enjoy_shopping <- calculate_probabilities(contingency_table)$col_category_probs["Yes"]
