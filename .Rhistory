print(target)
given_in_row <- given %in% rownames(table)
target_in_col <- target %in% colnames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
# Data
manufacturer_A <- c(3000, 3000 * 0.04) # 3000 yes, 120 no
manufacturer_B <- c(2400, 2400 * 0.07) # 2400 yes, 168 no
data <- list(manufacturer_A, manufacturer_B)
row_labels <- c("Regular", "Irregular")
col_labels <- c("Manufacturer A", "Manufacturer B")
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
prob_manufacturer_B_given_irregular <- bayes_rule(contingency_table, "Irregular", "Manufacturer B")
given_in_row <- given %in% colnames(table)
target_in_col <- target %in% rownames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% colnames(table)
target_in_col <- target %in% rownames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
# Data
manufacturer_A <- c(3000, 3000 * 0.04) # 3000 yes, 120 no
manufacturer_B <- c(2400, 2400 * 0.07) # 2400 yes, 168 no
data <- list(manufacturer_A, manufacturer_B)
row_labels <- c("Regular", "Irregular")
clear
exit
cl
clear
clear()
create_contingency_table <- function(vectors, row_labels, col_labels) {
# Ensure there are enough labels for the rows and columns
if (length(row_labels) != length(vectors) || length(col_labels) != length(vectors[[1]])) {
stop("The number of row and column labels must match the dimensions of the data.")
}
# Combine vectors into a matrix
data <- do.call(rbind, vectors)
# Create the contingency table
contingency_table <- matrix(data, nrow = length(vectors), ncol = length(vectors[[1]]), byrow = TRUE)
rownames(contingency_table) <- row_labels
colnames(contingency_table) <- col_labels
return(contingency_table)
}
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities while maintaining the matrix structure
probability_matrix <- table / total_respondents
return(probability_matrix)
}
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% colnames(table)
target_in_col <- target %in% rownames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Yes", "Female")
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Yes", "Female")
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% rownames(table)
target_in_col <- target %in% colnames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Yes", "Female")
cat("================================", "\n")
print("Expected Frequencies:")
perform_chi_square_test <- function(observed, expected = NULL, significance_level = 0.05, correct = FALSE) {
cat("--------------------------------\n")
# If expected values are not provided, calculate them
if (is.null(expected)) {
# Row totals
row_totals <- apply(observed, 1, sum)
# Column totals
col_totals <- apply(observed, 2, sum)
# Total number of observations
total <- sum(row_totals)
# Calculate expected frequencies
expected <- outer(row_totals, col_totals) / total
cat("================================", "\n")
print("Expected Frequencies:")
print(expected)
cat("================================", "\n")
}
# Calculate the Chi-square statistic manually
chi_squared_statistic <- sum((observed - expected)^2 / expected)
# Degrees of freedom
df <- (nrow(observed) - 1) * (ncol(observed) - 1)
# Calculate the critical Chi-square value
chi_squared_critical <- qchisq(1 - significance_level, df)
# Print the manual calculation results
cat("Degrees of Freedom:", df, "\n")
cat("Manual Chi-squared Statistic:", chi_squared_statistic, "\n")
cat("Critical Chi-squared at", significance_level * 100, "% significance:", chi_squared_critical, "\n")
# Decision based on manual calculation
if (chi_squared_statistic > chi_squared_critical) {
cat("Manual Result: Reject the null hypothesis - there is a significant difference.\n")
} else {
cat("Manual Result: Fail to reject the null hypothesis - there is no significant difference.\n")
}
# Perform the built-in Chi-square test for confirmation
chi_test_result <- chisq.test(observed, correct)
# Print the built-in test results
cat("\nBuilt-in Chi-squared Test Result:\n")
print(chi_test_result)
cat("--------------------------------\n")
# Returning the manual and built-in test results for further use if needed
return(list(
manual_chi_squared_statistic = chi_squared_statistic,
manual_chi_squared_critical = chi_squared_critical,
built_in_chi_squared_test = chi_test_result
))
}
perform_anova <- function(data, alpha = 0.05) {
cat("--------------------------------\n")
# Convert data to the correct format if it's a matrix or array
if (is.matrix(data) || is.array(data)) {
data <- data.frame(score = as.vector(data), group = rep(rownames(data), each = ncol(data)))
}
# Ensure the data is in the correct format
if (!("score" %in% names(data)) || !("group" %in% names(data))) {
stop("Data must have 'score' and 'group' columns")
}
# Calculate group means and grand mean
group_means <- aggregate(score ~ group, data, mean)
grand_mean <- mean(data$score)
# Print the means
print(group_means)
cat("Grand Mean:", grand_mean, "\n")
# Calculate Sum of Squares Total (SST) and Sum of Squares Within (SSW)
SST <- sum((data$score - grand_mean)^2)
SSW <- sum(sapply(split(data$score, data$group), function(x) sum((x - mean(x))^2)))
# Print the tables of SST and SSW
cat("Sum of Squares Total (SST):", SST, "\n")
cat("Sum of Squares Within (SSW):", SSW, "\n")
# Perform ANOVA and print the results
anova_result <- aov(score ~ group, data = data)
summary_anova <- summary(anova_result)
print(summary_anova)
# Calculate F-statistic manually
SSB <- SST - SSW
df_between <- length(unique(data$group)) - 1
df_within <- nrow(data) - length(unique(data$group))
MSB <- SSB / df_between
MSW <- SSW / df_within
F_statistic <- MSB / MSW
# Calculate critical F-value
F_critical <- qf(1 - alpha, df_between, df_within)
# Print the F-statistic and critical F-value
cat("Calculated F-statistic:", F_statistic, "\n")
cat("Critical F-value at", alpha * 100, "% significance level:", F_critical, "\n")
# Decision
if (F_statistic > F_critical) {
cat("Result: Reject the null hypothesis - there is a significant relationship.\n")
} else {
cat("Result: Fail to reject the null hypothesis - there is no significant relationship.\n")
}
cat("--------------------------------\n")
}
# -------------------------------Problem 1--------------------------------
library(readxl)
df <- read_excel("./data/BoxFills.xlsx")
# can simplify the df creation?
# df2 <- data.frame(score = c(df$"Plant 1", df$"Plant 2", df$"Plant 3", df$"Plant 4"), group = rep(group, each = length(df$"Plant 1")))
df2 <- stack(df)
# names(data) <- c("score", "group")
print(df2)
significance_level <- 0.05
perform_anova(df2, significance_level)
View(df2)
View(df)
perform_chi_square_test <- function(observed, expected = NULL, significance_level = 0.05, correct = FALSE) {
cat("--------------------------------\n")
# If expected values are not provided, calculate them
if (is.null(expected)) {
# Row totals
row_totals <- apply(observed, 1, sum)
# Column totals
col_totals <- apply(observed, 2, sum)
# Total number of observations
total <- sum(row_totals)
# Calculate expected frequencies
expected <- outer(row_totals, col_totals) / total
cat("================================", "\n")
print("Expected Frequencies:")
print(expected)
cat("================================", "\n")
}
# Calculate the Chi-square statistic manually
chi_squared_statistic <- sum((observed - expected)^2 / expected)
# Degrees of freedom
df <- (nrow(observed) - 1) * (ncol(observed) - 1)
# Calculate the critical Chi-square value
chi_squared_critical <- qchisq(1 - significance_level, df)
# Print the manual calculation results
cat("Degrees of Freedom:", df, "\n")
cat("Manual Chi-squared Statistic:", chi_squared_statistic, "\n")
cat("Critical Chi-squared at", significance_level * 100, "% significance:", chi_squared_critical, "\n")
# Decision based on manual calculation
if (chi_squared_statistic > chi_squared_critical) {
cat("Manual Result: Reject the null hypothesis - there is a significant difference.\n")
} else {
cat("Manual Result: Fail to reject the null hypothesis - there is no significant difference.\n")
}
# Perform the built-in Chi-square test for confirmation
chi_test_result <- chisq.test(observed, correct)
# Print the built-in test results
cat("\nBuilt-in Chi-squared Test Result:\n")
print(chi_test_result)
cat("--------------------------------\n")
# Returning the manual and built-in test results for further use if needed
return(list(
manual_chi_squared_statistic = chi_squared_statistic,
manual_chi_squared_critical = chi_squared_critical,
built_in_chi_squared_test = chi_test_result
))
}
perform_anova <- function(data, alpha = 0.05) {
cat("--------------------------------\n")
# Convert data to the correct format if it's a matrix or array
if (is.matrix(data) || is.array(data)) {
data <- data.frame(score = as.vector(data), group = rep(rownames(data), each = ncol(data)))
}
# Ensure the data is in the correct format
if (!("score" %in% names(data)) || !("group" %in% names(data))) {
stop("Data must have 'score' and 'group' columns")
}
# Calculate group means and grand mean
group_means <- aggregate(score ~ group, data, mean)
grand_mean <- mean(data$score)
# Print the means
print(group_means)
cat("Grand Mean:", grand_mean, "\n")
# Calculate Sum of Squares Total (SST) and Sum of Squares Within (SSW)
SST <- sum((data$score - grand_mean)^2)
SSW <- sum(sapply(split(data$score, data$group), function(x) sum((x - mean(x))^2)))
# Print the tables of SST and SSW
cat("Sum of Squares Total (SST):", SST, "\n")
cat("Sum of Squares Within (SSW):", SSW, "\n")
# Perform ANOVA and print the results
anova_result <- aov(score ~ group, data = data)
summary_anova <- summary(anova_result)
print(summary_anova)
# Calculate F-statistic manually
SSB <- SST - SSW
df_between <- length(unique(data$group)) - 1
df_within <- nrow(data) - length(unique(data$group))
MSB <- SSB / df_between
MSW <- SSW / df_within
F_statistic <- MSB / MSW
# Calculate critical F-value
F_critical <- qf(1 - alpha, df_between, df_within)
# Print the F-statistic and critical F-value
cat("Calculated F-statistic:", F_statistic, "\n")
cat("Critical F-value at", alpha * 100, "% significance level:", F_critical, "\n")
# Decision
if (F_statistic > F_critical) {
cat("Result: Reject the null hypothesis - there is a significant relationship.\n")
} else {
cat("Result: Fail to reject the null hypothesis - there is no significant relationship.\n")
}
cat("--------------------------------\n")
}
# -------------------------------Problem 1--------------------------------
library(readxl)
df <- read_excel("./data/BoxFills.xlsx")
# can simplify the df creation?
# df2 <- data.frame(score = c(df$"Plant 1", df$"Plant 2", df$"Plant 3", df$"Plant 4"), group = rep(group, each = length(df$"Plant 1")))
df2 <- stack(df)
# names(data) <- c("score", "group")
print(df2)
View(df2)
View(df2)
significance_level <- 0.05
perform_anova(df2, significance_level)
# -------------------------------Problem 2--------------------------------
observed <- matrix(c(21, 28, 35, 38, 34, 22, 29, 37, 36, 41, 28, 17), nrow = 3, byrow = TRUE)
