rm(list = ls())
rm(list = ls())
#----------------------------------Functions------------------------------------
create_contingency_table <- function(group1, group2, labels) {
# Ensure labels length is 4 and contains row and column names
if(length(labels) != 4) {
stop("Labels must contain exactly four elements: two row names and two column names.")
}
contingency_table <- matrix(c(group1, group2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- labels[1:2]
colnames(contingency_table) <- labels[3:4]
return(contingency_table)
}
rm(list = ls())
#----------------------------------Functions------------------------------------
create_contingency_table <- function(group1, group2, labels) {
# Ensure labels length is 4 and contains row and column names
if(length(labels) != 4) {
stop("Labels must contain exactly four elements: two row names and two column names.")
}
contingency_table <- matrix(c(group1, group2), nrow = 2, byrow = TRUE)
rownames(contingency_table) <- labels[1:2]
colnames(contingency_table) <- labels[3:4]
return(contingency_table)
}
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities for each row category (e.g., Male, Female)
row_probs <- apply(table, 1, sum) / total_respondents
# Calculate probabilities for each column category (e.g., Enjoys, Does Not Enjoy)
col_probs <- apply(table, 2, sum) / total_respondents
# Combine the results into a named list for clarity
probabilities <- list(
row_category_probs = row_probs,
col_category_probs = col_probs
)
return(probabilities)
}
conditional_probability <- function(table, condition1, condition2) {
# Determine if condition1 is a row or column in the table
if (condition1 %in% rownames(table) & condition2 %in% colnames(table)) {
# condition1 is a row, condition2 is a column
prob_condition2_given_condition1 <- table[condition1, condition2] / sum(table[condition1, ])
return(prob_condition2_given_condition1)
} else if (condition1 %in% colnames(table) & condition2 %in% rownames(table)) {
# condition1 is a column, condition2 is a row
prob_condition2_given_condition1 <- table[condition2, condition1] / sum(table[, condition1])
return(prob_condition2_given_condition1)
} else {
stop("Invalid conditions. Please ensure they match the row and column names of the table.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Check if the evidence and hypothesis are valid
if ((evidence %in% rownames(table) || evidence %in% colnames(table)) &&
(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
# Calculate P(Hypothesis)
if (hypothesis %in% rownames(table)) {
prob_hypothesis <- sum(table[hypothesis, ]) / sum(table)
} else {
prob_hypothesis <- sum(table[, hypothesis]) / sum(table)
}
# Calculate P(Evidence|Hypothesis)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
# Calculate P(Evidence)
if (evidence %in% rownames(table)) {
prob_evidence <- sum(table[evidence, ]) / sum(table)
} else {
prob_evidence <- sum(table[, evidence]) / sum(table)
}
# Apply Bayes' rule: P(Hypothesis|Evidence) = (P(Evidence|Hypothesis) * P(Hypothesis)) / P(Evidence)
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
} else {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104)  # 136 yes, 104 no
females <- c(224, 36)  # 224 yes, 36 no
labels <- c("Male", "Female", "Yes", "No")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(males, females, labels)
contingency_table
# Probability calculations
probability_male <- calculate_probabilities(contingency_table)
probability_male
# Probability calculations
probability_male <- calculate_probabilities(contingency_table)["Male"]
probability_male
# Probability calculations
prob_male <- all_probabilities$row_category_probs["Male"]
# Probability calculations
prob_male <- calculate_probabilities(contingency_table)$row_category_probs["Male"]
prob_male
prob_enjoy_shopping <- calculate_probabilities(contingency_table)$col_category_probs["Yes"]
# Ensure there are enough labels for the rows and columns
if (length(row_labels) != length(vectors) || length(col_labels) != length(vectors[[1]])) {
stop("The number of row and column labels must match the dimensions of the data.")
}
# Combine vectors into a matrix
data <- do.call(rbind, vectors)
# Create the contingency table
contingency_table <- matrix(data, nrow = length(vectors), ncol = length(vectors[[1]]), byrow = TRUE)
rownames(contingency_table) <- row_labels
colnames(contingency_table) <- col_labels
return(contingency_table)
create_contingency_table <- function(vectors, row_labels, col_labels) {
# Ensure there are enough labels for the rows and columns
if (length(row_labels) != length(vectors) || length(col_labels) != length(vectors[[1]])) {
stop("The number of row and column labels must match the dimensions of the data.")
}
# Combine vectors into a matrix
data <- do.call(rbind, vectors)
# Create the contingency table
contingency_table <- matrix(data, nrow = length(vectors), ncol = length(vectors[[1]]), byrow = TRUE)
rownames(contingency_table) <- row_labels
colnames(contingency_table) <- col_labels
return(contingency_table)
}
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities while maintaining the matrix structure
probability_matrix <- table / total_respondents
return(probability_matrix)
}
rm(list = ls())
create_contingency_table <- function(vectors, row_labels, col_labels) {
# Ensure there are enough labels for the rows and columns
if (length(row_labels) != length(vectors) || length(col_labels) != length(vectors[[1]])) {
stop("The number of row and column labels must match the dimensions of the data.")
}
# Combine vectors into a matrix
data <- do.call(rbind, vectors)
# Create the contingency table
contingency_table <- matrix(data, nrow = length(vectors), ncol = length(vectors[[1]]), byrow = TRUE)
rownames(contingency_table) <- row_labels
colnames(contingency_table) <- col_labels
return(contingency_table)
}
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities while maintaining the matrix structure
probability_matrix <- table / total_respondents
return(probability_matrix)
}
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% rownames(table)
target_in_col <- target %in% colnames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
# Data
manufacturer_A <- c(3000, 3000 * 0.04) # 3000 yes, 120 no
manufacturer_B <- c(2400, 2400 * 0.07) # 2400 yes, 168 no
data <- list(manufacturer_A, manufacturer_B)
row_labels <- c("Regular", "Irregular")
col_labels <- c("Manufacturer A", "Manufacturer B")
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
prob_manufacturer_B_given_irregular <- bayes_rule(contingency_table, "Irregular", "Manufacturer B")
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
print(table)
print(given)
print(target)
given_in_row <- given %in% rownames(table)
target_in_col <- target %in% colnames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
# Data
manufacturer_A <- c(3000, 3000 * 0.04) # 3000 yes, 120 no
manufacturer_B <- c(2400, 2400 * 0.07) # 2400 yes, 168 no
data <- list(manufacturer_A, manufacturer_B)
row_labels <- c("Regular", "Irregular")
col_labels <- c("Manufacturer A", "Manufacturer B")
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
prob_manufacturer_B_given_irregular <- bayes_rule(contingency_table, "Irregular", "Manufacturer B")
given_in_row <- given %in% colnames(table)
target_in_col <- target %in% rownames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% colnames(table)
target_in_col <- target %in% rownames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
# Data
manufacturer_A <- c(3000, 3000 * 0.04) # 3000 yes, 120 no
manufacturer_B <- c(2400, 2400 * 0.07) # 2400 yes, 168 no
data <- list(manufacturer_A, manufacturer_B)
row_labels <- c("Regular", "Irregular")
clear
exit
cl
clear
clear()
create_contingency_table <- function(vectors, row_labels, col_labels) {
# Ensure there are enough labels for the rows and columns
if (length(row_labels) != length(vectors) || length(col_labels) != length(vectors[[1]])) {
stop("The number of row and column labels must match the dimensions of the data.")
}
# Combine vectors into a matrix
data <- do.call(rbind, vectors)
# Create the contingency table
contingency_table <- matrix(data, nrow = length(vectors), ncol = length(vectors[[1]]), byrow = TRUE)
rownames(contingency_table) <- row_labels
colnames(contingency_table) <- col_labels
return(contingency_table)
}
calculate_probabilities <- function(table) {
total_respondents <- sum(table)
# Calculate probabilities while maintaining the matrix structure
probability_matrix <- table / total_respondents
return(probability_matrix)
}
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% colnames(table)
target_in_col <- target %in% rownames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Yes", "Female")
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Female", "Yes")
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Yes", "Female")
conditional_probability <- function(table, given, target) {
# Determine the position of the given and target conditions
given_in_row <- given %in% rownames(table)
target_in_col <- target %in% colnames(table)
# Calculate the conditional probability based on the position
if (given_in_row && target_in_col) {
return(table[given, target] / sum(table[given, ]))
} else if (!given_in_row && !target_in_col) {
stop("Both given and target do not match any row or column names.")
} else {
# If one condition is a row and the other is a column, but they are swapped
stop("Mismatch between the positions of given and target conditions. Please check your inputs.")
}
}
bayes_rule <- function(table, evidence, hypothesis) {
# Validate inputs
if (!(evidence %in% rownames(table) || evidence %in% colnames(table)) ||
!(hypothesis %in% rownames(table) || hypothesis %in% colnames(table))) {
stop("Invalid evidence or hypothesis. Please ensure they match the row and column names of the table.")
}
# Calculate probabilities
prob_hypothesis <- ifelse(hypothesis %in% rownames(table),
sum(table[hypothesis, ]) / sum(table),
sum(table[, hypothesis]) / sum(table)
)
print(table)
prob_evidence_given_hypothesis <- conditional_probability(table, hypothesis, evidence)
prob_evidence <- ifelse(evidence %in% rownames(table),
sum(table[evidence, ]) / sum(table),
sum(table[, evidence]) / sum(table)
)
# Apply Bayes' rule
prob_hypothesis_given_evidence <- (prob_evidence_given_hypothesis * prob_hypothesis) / prob_evidence
return(prob_hypothesis_given_evidence)
}
#----------------------------------Pr1------------------------------------------
# Data
males <- c(136, 104) # 136 yes, 104 no
females <- c(224, 36) # 224 yes, 36 no
data <- list(males, females)
row_labels <- c("Yes", "No")
col_labels <- c("Male", "Female")
total <- sum(males) + sum(females)
contingency_table <- create_contingency_table(data, row_labels = row_labels, col_labels = col_labels)
all_probabilities <- calculate_probabilities(contingency_table)
# Probability calculations
prob_male <- sum(all_probabilities[, "Male"])
prob_enjoy <- sum(all_probabilities["Yes", ])
prob_female_enjoy <- all_probabilities["Yes", "Female"]
prob_male_not_enjoyt <- all_probabilities["No", "Male"]
prob_female_or_enjoy <- sum(all_probabilities[, "Female"]) + sum(all_probabilities["Yes", ]) - all_probabilities["Yes", "Female"]
prob_male_or_not_enjoy <- sum(all_probabilities[, "Male"]) + sum(all_probabilities["No", ]) - all_probabilities["No", "Male"]
prob_female_knowing_enjoy <- bayes_rule(contingency_table, "Yes", "Female")
